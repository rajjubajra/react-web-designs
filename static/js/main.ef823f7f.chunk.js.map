{"version":3,"sources":["images/logo.png","config.js","ajax.js","components/MainPage/ImgLab.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","config","singleton","ajax","Object","asyncToGenerator","regenerator_default","a","mark","_callee","tokenURL","response","csrf_token","wrap","_context","prev","next","axios","get","withCredentials","sent","data","create","baseURL","headers","X-CSRF-Token","params","_format","console","log","t0","error","abrupt","stop","Page","styled","div","_templateObject","emitter","events","EventEmitter","ImgLab","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","images","isLoaded","refresh","bind","assertThisInitialized","addListener","setState","alert","_context2","map","img","react_default","createElement","key","nid","src","field_image_rest_api","alt","field_image_category","title","Component","App","MainPage_ImgLab","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6RCAzBC,EAED,4CCcVC,EAAY,KAGhBC,EAAAC,OAAAC,EAAA,GAAAC,EAAAC,EAAAC,KAAe,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACTd,EADS,CAAAY,EAAAE,KAAA,gBAELN,EAAWT,EAAoB,sBAF1Ba,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIcC,IAAMC,IAAIR,EAAU,CACzCS,iBAAiB,IALV,OAIHR,EAJGG,EAAAM,KAOHR,EAAaD,EAASU,KAC5BnB,EAAYe,IAAMK,OAAO,CACvBC,QAAStB,EACTkB,iBAAiB,EACjBK,QAAS,CAAEC,eAAgBb,GAC3Bc,OAAQ,CAAEC,QAAS,UAErBC,QAAQC,IAAI,6BAA8B3B,GAdjCY,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,SAgBTc,QAAQG,MAARjB,EAAAgB,IAhBS,eAAAhB,EAAAkB,OAAA,SAmBN9B,GAnBM,yBAAAY,EAAAmB,SAAAxB,EAAA,gNCbf,IAAMyB,QAAOC,EAAOC,IAAVC,KAYJC,EAAU,IAAIC,IAAOC,aAiEZC,cA7Db,SAAAA,IAAc,IAAAC,EAAA,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAAwC,KAAAH,IACZC,EAAAtC,OAAAyC,EAAA,EAAAzC,CAAAwC,KAAAxC,OAAA0C,EAAA,EAAA1C,CAAAqC,GAAAM,KAAAH,QACKI,MAAQ,CACXC,OAAQ,GACRC,UAAU,GAEZR,EAAKS,QAAUT,EAAKS,QAAQC,KAAbhD,OAAAiD,EAAA,EAAAjD,QAAAiD,EAAA,EAAAjD,CAAAsC,KANHA,oFAUZJ,EAAQgB,YAAY,eAAgBV,KAAKO,wDAIzCb,EAAQgB,YAAY,eAAgBV,KAAKO,6KAInCP,KAAKO,uRAMWhD,kBAAdc,kBACiBA,EAAMC,IAAI,wBAA3BP,UACOU,MAEXuB,KAAKW,SAAS,CACEN,OAAQtC,EAASU,KACjB6B,UAAU,sDAI5BM,MAAKC,EAAA3B,iJAQP,IACMmB,EAASL,KAAKI,MAAMC,OAAOS,IAAI,SAACC,GACtC,OACEC,EAAArD,EAAAsD,cAAA,OAAKC,IAAKH,EAAII,KACVH,EAAArD,EAAAsD,cAAA,OAAKG,IAJC,4BAIUL,EAAIM,qBAAsBC,IAAKP,EAAIQ,qBAAsBC,MAAOT,EAAIQ,0BAK1F,OACEP,EAAArD,EAAAsD,cAAC3B,EAAD,KAC0B,GAAvBU,KAAKI,MAAME,SAAmBD,EAAS,sBAtD3BoB,aCANC,mLAVX,OACEV,EAAArD,EAAAsD,cAAA,WACED,EAAArD,EAAAsD,cAACU,EAAD,cALUF,aCIEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAArD,EAAAsD,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ef823f7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4da72e5a.png\";","export default {\n  // copy this file to config.js and edit the settings to match yours\n  drupal_url: 'http://yellow-website.com/d8-api-provider'\n}","import axios from 'axios'\nimport config from './config'\n\n/*\n * Wrapper for axios AJAX library.\n * \n * Basically, we use axios directly. But before axios can be used,\n * - we create an new axios instance\n * - give than instance an AJAX fetched CSRF token, which it will send as header 'X-CSRF-Token' with every request\n * - tell the instance that it should include credentials (cookie) with every request\n * - tell the instance that it should include the query parameter \"?_format=json\" with every request\n * \n * Finally, we wrap this activity in a Promise and return it, so that callers can\n * rely on the promise to call their own callback on successful resolution of the promise\n * or an error handler if the promise gets rejected.\n */\nlet singleton = null // a singleton instance of axios that the default init function returns\n\n// note the 'async' keyword, it allows us to call 'await' later\nexport default async () => {\n  if(!singleton) {\n    const tokenURL = config.drupal_url + '/rest/session/token';\n    try {\n      const response = await axios.get(tokenURL, {\n        withCredentials: true // required to send auth cookie\n      })\n      const csrf_token = response.data\n      singleton = axios.create({\n        baseURL: config.drupal_url, // every request is relative to this URL\n        withCredentials: true, // include auth cookie in every request\n        headers: { 'X-CSRF-Token': csrf_token }, // include this header in every request\n        params: { _format: 'json' }, // add these query params to every request\n      })\n      console.log('Created new axios instance', singleton)\n    } catch(error) {\n      console.error(error)\n    }\n  }\n  return singleton\n}","import React, { Component } from 'react';\nimport events from 'events';\nimport ajax from '../../ajax';\nimport styled from 'styled-components';\n\n\nconst Page = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  img{\n    width: 250px;\n    border:1px solid #ccc;\n    margin: 10px;\n  }\n`;\n\n// Create an emitter object so that we can do pub/sub\nconst emitter = new events.EventEmitter();\n\n\nclass ImgLab extends Component {\n  constructor() {\n    super()\n    this.state = {\n      images: [],\n      isLoaded: false\n    }\n    this.refresh = this.refresh.bind(this)\n  }\n\n  componentWillMount() {\n    emitter.addListener('NODE_UPDATED', this.refresh)\n  }\n\n  componentWillUnmount() {\n    emitter.addListener('NODE_UPDATED', this.refresh)\n  }\n\n  async componentDidMount() {\n    await this.refresh()\n  }\n\n  async refresh() {\n    // AJAX fetch server/node/rest?_format=json and setState with the response data\n    try {\n      const axios = await ajax() // wait for an initialized axios object\n      const response = await axios.get('/rest/images') // wait for the POST AJAX request to complete\n      if (response.data) {\n        // setState will trigger repaint\n        this.setState({ \n                        images: response.data, \n                        isLoaded: true\n                      })\n      }\n      } catch (e) {\n      alert(e)\n    }\n  }\n\n  \n\n  render(){\n    \n    const url = 'http://yellow-website.com'\n    const images = this.state.images.map((img)=> {\n    return(    \n      <div key={img.nid}>\n          <img src={url + img.field_image_rest_api} alt={img.field_image_category} title={img.field_image_category} />\n      </div>)\n    });\n\n    \n    return(\n      <Page>\n        {this.state.isLoaded == true ? images : 'Loading....'}\n      </Page>\n    )\n  }\n  \n  \n}\n\nexport default ImgLab;\n","import React, { Component } from 'react';\n//import Header from './components/Header/Header';\nimport MainPage from './components/MainPage/MainPage';\nimport Logo from './images/logo.png';\nimport './App.css';\nimport ImgLab from './components/MainPage/ImgLab';\n\n\nclass App extends Component {\n\n  render(){\n    return(\n      <div>\n        <ImgLab />\n      </div>\n    )\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}